flekspy.yt.yt
=============

.. py:module:: flekspy.yt.yt


Classes
-------

.. autoapisummary::

   flekspy.yt.yt.FLEKSFieldInfo
   flekspy.yt.yt.FLEKSHierarchy
   flekspy.yt.yt.YtFLEKSData


Functions
---------

.. autoapisummary::

   flekspy.yt.yt.extract_phase


Module Contents
---------------

.. py:class:: FLEKSFieldInfo(ds, field_list)

   Bases: :py:obj:`yt.fields.field_info_container.FieldInfoContainer`


   This is a generic field container.  It contains a list of potential derived
   fields, all of which know how to act on a data object and return a value.
   This object handles converting units as well as validating the availability
   of a given field.



   .. py:attribute:: l_units
      :value: 'code_length'



   .. py:attribute:: v_units
      :value: 'code_velocity'



   .. py:attribute:: p_units
      :value: 'code_pressure'



   .. py:attribute:: b_units
      :value: 'code_magnetic'



   .. py:attribute:: e_units
      :value: 'code_magnetic * code_velocity'



   .. py:attribute:: rho_units
      :value: 'code_density'



   .. py:attribute:: mass_units
      :value: 'code_mass'



   .. py:attribute:: known_other_fields


   .. py:attribute:: known_particle_fields


   .. py:attribute:: extra_union_fields


   .. py:method:: setup_fluid_fields()


   .. py:method:: setup_fluid_aliases()


   .. py:method:: setup_particle_fields(ptype)


.. py:class:: FLEKSHierarchy(ds, dataset_type='boxlib_native')

   Bases: :py:obj:`yt.frontends.boxlib.api.BoxlibHierarchy`


   The index class for patch and block AMR datasets.


   .. py:method:: _detect_output_fields()


.. py:class:: YtFLEKSData(output_dir, read_field_data=False, cparam_filename=None, fparam_filename=None, dataset_type='boxlib_native', storage_filename=None, units_override=None, unit_system='mks')

   Bases: :py:obj:`yt.frontends.boxlib.api.BoxlibDataset`


   Read and plot the AMReX format output from FLEKS.

   :param output_dir: the path to the data.
   :type output_dir: str

   .. rubric:: Examples

   >>> import flekspy
   >>> ds = flekspy.YtFLEKSData("3d_particle*n00004750_amrex")


   .. py:attribute:: _index_class


   .. py:attribute:: _field_info_class


   .. py:attribute:: default_fluid_type
      :value: 'mesh'



   .. py:attribute:: default_field
      :value: ('mesh', 'density')



   .. py:attribute:: fluid_types
      :value: ('mesh', 'index', 'raw')



   .. py:attribute:: read_field_data
      :value: False



   .. py:method:: _parse_parameter_file()

      Parses the parameter file and establishes the various
      dictionaries.



   .. py:method:: _set_code_unit_attributes()


   .. py:method:: pvar(var)


   .. py:method:: get_slice(norm, cut_loc) -> flekspy.util.DataContainer2D

      Returns a DataContainer2D object that contains a slice along the normal direction.

      :param norm: slice normal direction in "x", "y" or "z"
      :type norm: str
      :param cut_loc: cut location along the normal direction
      :type cut_loc: float



   .. py:method:: get_domain() -> flekspy.util.DataContainer3D

      Read all the simulation data into a 3D box.



   .. py:method:: plot_slice(norm, cut_loc, vars, unit_type='planet', *args, **kwargs)

      Plot 2D slice

      :param norm: str
                   Normal direction of the slice in "x", "y" or "z".
      :param cut_loc: float
                      The location of the slice.
      :param vars: a list or string of plotting variables.
                   Example: "Bx rhos0" or ["Bx", "rhos0"]

      unit_type: The unit system of the plots. "planet" or "si".

      .. rubric:: Examples

      >>> vars = ["rhos0", "uzs0", "Bz", "pxxs1", "Ex"]
      >>> splt = ds.plot_slice("y", 0.0, vars)
      >>> splt.display()



   .. py:method:: _get_profile(x_field, y_field, z_field, region: yt.data_objects.selection_objects.data_selection_objects.YTSelectionContainer | None = None, x_bins: int = 128, y_bins: int = 128, domain_size: tuple | None = None)


   .. py:method:: get_phase(x_field, y_field, z_field, region: yt.data_objects.selection_objects.data_selection_objects.YTSelectionContainer | None = None, x_bins: int = 128, y_bins: int = 128, domain_size: tuple | None = None)

      Get particle phase space distribution.

      :param region: YTSelectionContainer
                     Spatial region to be selected, such as all_data, box, region, or sphere.
      :param x_field & y_field: string
                                The x-/y- axes, from "p_ux", "p_uy", "p_uz", "p_x", "p_y" or "p_z".
      :param z_field: string
                      It is usually the particle weight: "p_w".
      :param domain_size: tuple
                          Axis range of 4 elements: x_min, x_max, y_min, y_max

      .. rubric:: Examples

      >>> x, y, w = ds.get_phase("p_ux", "p_uy", "p_w", domain_size=(-1, 1, -1, 1))



   .. py:method:: plot_phase(x_field, y_field, z_field, region: yt.data_objects.selection_objects.data_selection_objects.YTSelectionContainer | None = None, unit_type: str = 'planet', x_bins: int = 128, y_bins: int = 128, domain_size: tuple | None = None, font_size: float = 18, figure_size: float = 8, customized: bool = False) -> yt.visualization.profile_plotter.PhasePlot

      Plot particle phase space distribution.

      :param region: YTSelectionContainer
                     Spatial region to be selected, such as all_data, box, region, or sphere.
      :param x_field & y_field: string
                                The x-/y- axes, from "p_ux", "p_uy", "p_uz", "p_x", "p_y" or "p_z".
      :param z_field: string
                      It is usually the particle weight: "p_w".
      :param unit_type: string
                        The unit system of the plots. "planet" or "si".
      :param domain_size: tuple
                          Axis range of 4 elements: x_min, x_max, y_min, y_max

      .. rubric:: Examples

      >>> pp = ds.plot_phase("p_ux", "p_uy", "p_w", domain_size=(-1, 1, -1, 1))
      >>> pp.show()



   .. py:method:: plot_particles(x_field, y_field, z_field, region: yt.data_objects.selection_objects.data_selection_objects.YTSelectionContainer | None = None, unit_type: str = 'planet', x_bins: int = 128, y_bins: int = 128, **kwargs)

      Plot the particle position of particles inside a box.

      :param x_field & y_field: str
                                The x- y- axes, from "p_x", "p_y", "p_z".
      :param z_field: str
                      color variable, usually the particle weight "p_w".
      :param region: YTSelectionContainer
                     Spatial region to be selected, such as all_data, box, region, or sphere.
      :param unit_type: str
                        The unit system of the plots. "planet" or "si".

      See more at https://yt-project.org/doc/reference/api/yt.visualization.particle_plots.html#yt.visualization.particle_plots.ParticlePlot

      .. rubric:: Examples

      >>> pp = ds.plot_particles([8, -1, -1], [10, 0, 0], "p_x", "p_y", "p_w", unit_type="planet")
      >>> pp.show()



.. py:function:: extract_phase(pp: yt.visualization.profile_plotter.PhasePlot)

   Extract phase space distribution from PhasePlot object.

   :param pp: YT PhasePlot object.
   :type pp: PhasePlot

   :returns: Horizontal, vertical coordinates of the plot, and phase space density.
   :rtype: x, y, f


